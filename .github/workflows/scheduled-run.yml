name: Scheduled Run API Call

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:
    inputs:
      topic:
        description: 'Topic for content generation'
        required: true
        default: 'Latest AI News'
        type: string

env:
  API_URL: https://nextjs-kaiban-agent-starter.vercel.app
  TOPIC: ${{ inputs.topic || 'AI News Today' }}  # Use input or default

jobs:
  trigger-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create API call script
        run: |
          cat > trigger-run.js << 'EOL'
          const https = require('https');
          const fs = require('fs').promises;

          async function triggerRun() {
            const topic = process.env.TOPIC;
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            
            console.log(`Starting API call for topic: ${topic}`);
            
            const url = `${process.env.API_URL}/api/agents?topic=${encodeURIComponent(topic)}`;
            
            const request = https.get(url, async (res) => {
              let data = '';
              
              // Check status code first
              if (res.statusCode !== 200) {
                console.error(`API returned status code: ${res.statusCode}`);
                process.exit(1);
              }
              
              res.on('data', (chunk) => {
                data += chunk;
              });
              
              res.on('end', async () => {
                try {
                  const response = JSON.parse(data);
                  
                  // Check for API error response
                  if (response.error) {
                    throw new Error(`API Error: ${response.error}`);
                  }
                  
                  if (!response.output) {
                    throw new Error('Invalid response format from API');
                  }

                  // Create outputs directory if it doesn't exist
                  await fs.mkdir('outputs', { recursive: true });
                  
                  // Format the markdown content
                  const markdownContent = [
                    `# ${topic}`,
                    `Generated on: ${new Date().toISOString()}`,
                    '',
                    '## Content',
                    `${response.output.result || 'No content generated'}`,
                    '',
                    '## Run Statistics',
                    `- Run ID: ${response.runId || 'N/A'}`,
                    `- Status: ${response.output.status || 'N/A'}`,
                    response.output.stats ? [
                      `- Duration: ${response.output.stats.duration}ms`,
                      `- Total Tokens: ${response.output.stats.llmUsageStats?.inputTokens + response.output.stats.llmUsageStats?.outputTokens || 'N/A'}`,
                      `- Cost: $${response.output.stats.costDetails?.totalCost.toFixed(4) || 'N/A'}`
                    ].join('\n') : '',
                    '',
                    '## Generation Details',
                    `- API Status Code: ${res.statusCode}`,
                    `- Generated At: ${new Date().toISOString()}`
                  ].join('\n');
                  
                  // Save to file
                  const filename = `outputs/${timestamp}-${topic.toLowerCase().replace(/[^a-z0-9]+/g, '-')}.md`;
                  await fs.writeFile(filename, markdownContent);
                  
                  console.log(`Successfully generated content for topic: ${topic}`);
                  console.log(`Saved to: ${filename}`);
                  
                  // Set environment variables for the commit step
                  process.env.COMMIT_MESSAGE = `Generated content for: ${topic}`;
                  process.env.FILE_PATH = filename;
                  
                } catch (error) {
                  console.error('Error processing response:', error);
                  process.exit(1);
                }
              });
            });
            
            request.on('error', (error) => {
              console.error('Error making request:', error);
              process.exit(1);
            });
          }

          triggerRun();
          EOL

      - name: Execute API call
        run: node trigger-run.js

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push if changes exist
        run: |
          if [ -d "outputs" ]; then
            git add outputs/
            if ! git diff --staged --quiet; then
              git commit -m "${{ env.COMMIT_MESSAGE }}"
              git push
            else
              echo "No changes to commit"
            fi
          else
            echo "Outputs directory not found"
            exit 1
          fi

      - name: Handle errors
        if: failure()
        run: |
          echo "::error::Failed to generate or commit content. Check the logs for details."
          exit 1 