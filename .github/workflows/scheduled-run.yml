name: Scheduled Run API Call

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:
    inputs:
      topic:
        description: 'Topic for content generation'
        required: true
        default: 'Latest AI Developments'
        type: string

env:
  API_URL: https://nextjs-kaiban-agent-starter.vercel.app
  TOPIC: ${{ inputs.topic || 'AI News Today' }}  # Use input or default

jobs:
  trigger-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install axios axios-retry

      - name: Create API call script
        run: |
          cat > trigger-run.js << 'EOL'
          const axios = require('axios');
          const axiosRetry = require('axios-retry');
          const fs = require('fs').promises;
          const path = require('path');

          // Configure axios retry logic
          axiosRetry(axios, { 
            retries: 3,
            retryDelay: axiosRetry.exponentialDelay,
            retryCondition: (error) => {
              return axiosRetry.isNetworkOrIdempotentRequestError(error) || error.response?.status === 429;
            }
          });

          async function triggerRun() {
            const topic = process.env.TOPIC;
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            
            try {
              console.log(`Starting API call for topic: ${topic}`);
              
              const response = await axios.get(`${process.env.API_URL}/api/agents`, {
                params: { topic },
                validateStatus: status => status === 200
              });
              
              if (!response.data || !response.data.output) {
                throw new Error('Invalid response format from API');
              }

              // Create outputs directory if it doesn't exist
              await fs.mkdir('outputs', { recursive: true });
              
              // Format the markdown content
              const markdownContent = [
                `# ${topic}`,
                `Generated on: ${new Date().toISOString()}`,
                '',
                '## Content',
                `${response.data.output.result || 'No content generated'}`,
                '',
                '## Run Statistics',
                `- Run ID: ${response.data.runId || 'N/A'}`,
                `- Status: ${response.data.output.status || 'N/A'}`,
                response.data.output.stats ? [
                  `- Duration: ${response.data.output.stats.duration}ms`,
                  `- Total Tokens: ${response.data.output.stats.llmUsageStats?.inputTokens + response.data.output.stats.llmUsageStats?.outputTokens || 'N/A'}`,
                  `- Cost: $${response.data.output.stats.costDetails?.totalCost.toFixed(4) || 'N/A'}`
                ].join('\n') : ''
              ].join('\n');
              
              // Save to file
              const filename = `outputs/${timestamp}-${topic.toLowerCase().replace(/[^a-z0-9]+/g, '-')}.md`;
              await fs.writeFile(filename, markdownContent);
              
              console.log(`Successfully generated content for topic: ${topic}`);
              console.log(`Saved to: ${filename}`);
              
              // Set environment variables for the commit step
              process.env.COMMIT_MESSAGE = `Generated content for: ${topic}`;
              process.env.FILE_PATH = filename;
              
            } catch (error) {
              console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
                config: {
                  url: error.config?.url,
                  method: error.config?.method,
                  headers: error.config?.headers
                }
              });
              process.exit(1);
            }
          }

          triggerRun();
          EOL

      - name: Execute API call
        run: node trigger-run.js

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push if changes exist
        run: |
          if [ -d "outputs" ]; then
            git add outputs/
            if ! git diff --staged --quiet; then
              git commit -m "${{ env.COMMIT_MESSAGE }}"
              git push
            else
              echo "No changes to commit"
            fi
          else
            echo "Outputs directory not found"
            exit 1
          fi

      - name: Handle errors
        if: failure()
        run: |
          echo "::error::Failed to generate or commit content. Check the logs for details."
          exit 1 